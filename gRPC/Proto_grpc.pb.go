// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IncrementSystemClient is the client API for IncrementSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IncrementSystemClient interface {
	Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementResponse, error)
	PingServer(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Empty, error)
}

type incrementSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewIncrementSystemClient(cc grpc.ClientConnInterface) IncrementSystemClient {
	return &incrementSystemClient{cc}
}

func (c *incrementSystemClient) Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementResponse, error) {
	out := new(IncrementResponse)
	err := c.cc.Invoke(ctx, "/Proto.IncrementSystem/Increment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incrementSystemClient) PingServer(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Proto.IncrementSystem/PingServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncrementSystemServer is the server API for IncrementSystem service.
// All implementations must embed UnimplementedIncrementSystemServer
// for forward compatibility
type IncrementSystemServer interface {
	Increment(context.Context, *IncrementRequest) (*IncrementResponse, error)
	PingServer(context.Context, *Ping) (*Empty, error)
	mustEmbedUnimplementedIncrementSystemServer()
}

// UnimplementedIncrementSystemServer must be embedded to have forward compatible implementations.
type UnimplementedIncrementSystemServer struct {
}

func (UnimplementedIncrementSystemServer) Increment(context.Context, *IncrementRequest) (*IncrementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}
func (UnimplementedIncrementSystemServer) PingServer(context.Context, *Ping) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingServer not implemented")
}
func (UnimplementedIncrementSystemServer) mustEmbedUnimplementedIncrementSystemServer() {}

// UnsafeIncrementSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IncrementSystemServer will
// result in compilation errors.
type UnsafeIncrementSystemServer interface {
	mustEmbedUnimplementedIncrementSystemServer()
}

func RegisterIncrementSystemServer(s grpc.ServiceRegistrar, srv IncrementSystemServer) {
	s.RegisterService(&IncrementSystem_ServiceDesc, srv)
}

func _IncrementSystem_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncrementSystemServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proto.IncrementSystem/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncrementSystemServer).Increment(ctx, req.(*IncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncrementSystem_PingServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncrementSystemServer).PingServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proto.IncrementSystem/PingServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncrementSystemServer).PingServer(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

// IncrementSystem_ServiceDesc is the grpc.ServiceDesc for IncrementSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IncrementSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Proto.IncrementSystem",
	HandlerType: (*IncrementSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Increment",
			Handler:    _IncrementSystem_Increment_Handler,
		},
		{
			MethodName: "PingServer",
			Handler:    _IncrementSystem_PingServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/Proto.proto",
}
